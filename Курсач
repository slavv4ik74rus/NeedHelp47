#include <stdio.h>
#include <math.h>
#include <locale.h>
#include <malloc.h>
#pragma warning(disable : 4996) // чтобы могли использовать fopen

int invmatrix(int n, double** a, double* b) {
    int i, j, k;
    double tmp;

    // Ищем ведущий элемент
    double max = a[0][0]; k = 0;
    for (i = 1, j = 0; i < n; i++) {
        if (fabs(a[i][j]) > fabs(max)) {
            max = a[i][j];
            k = i;
        }
    }
    printf("\nНаибольшее = %4.1lf\n\n", max);


    // меняем местами строки
    if (k) {
        for (j = 0, i = 0; j < n-1; j++) {
            tmp = a[i][j];
            a[i][j] = a[k][j];
            a[k][j] = tmp;
        }
        tmp = b[0]; b[0] = b[k]; b[k] = tmp;
    }




    
    // Output
    for (i = 0; i < n; i++) {
        for (j = 0; j < n-1; j++) {
            printf("%4.1lf ", a[i][j]);
        }
        printf("%4.1lf\n", b[i]);
    }




    return 0;
}

void outputMatrix(int n, double** A) {
    int i, j;
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            printf("%4.1lf ", A[i][j]);
        }
        printf("\n");
    }
}

int main() {
    setlocale(LC_ALL, "rus");

    int i, j, k, // счетчики
        n = 4; // количество линейных урав
    double** A, // матрица
        **ls; // левая часть
    double* rs; //правая часть
    FILE* fp;

    if (!(fp = fopen("matrix.txt", "rt"))) { // Проверяем открылся ли файл
        printf("Ошибка открытия файла.\n");
        exit(1);   //выход из программы в случае ошибки открытия файла
    }
    else {
        A = (double**)malloc(n * sizeof(double*));
        ls = (double**)malloc(n * sizeof(double*));
        rs = (double*)malloc(n * sizeof(double));
        if (!A | !ls | !rs) { printf("Ошибка выделения памяти.\n"); exit(10); }
        for (i = 0; i < n; i++) {
            A[i] = (double*)malloc(n * sizeof(double));
            ls[i] = (double*)malloc(n * sizeof(double));
        }
        


        // Заполняем главную матрицу
        for (i = 0; i < n; i++) {
            for (j = 0; j < n; j++) {
                fscanf(fp, "%lf", &A[i][j]);
            }
        }
        // Заполняем матрицу левой части
        for (i = 0; i < n; i++) {
            for (j = 0; j < n - 1; j++) {
                ls[i][j] = A[i][j];
            }
        }
        // Заполняем массив правой части
        for (i = 0, j = n - 1; i < n; i++) {
            rs[i] = A[i][j];
        }



        outputMatrix(n, A);
        invmatrix(n, ls, rs);
        









        printf("\n\n\n\n\n");



        for (i = 0; i < n; i++) {
            free(A[i]); free(A);
            free(ls[i]); free(ls);
        }
        free(rs);
        fclose(fp);
    }
    



    

    return 0;
}
